apiVersion: apps/v1
kind: Deployment

metadata:
  namespace: monitoring
  name: discord-prometheus-exporter
  labels:
    tier: backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: discord
      tier: backend
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: discord
        tier: backend
    spec:
      restartPolicy: Always

      containers:
      - name: discord-prometheus-exporter
        image: lordslair/discord-prometheus-exporter:latest
        imagePullPolicy: Always
        resources:
          limits:
            memory: 64Mi
            cpu: 100m
          requests:
            memory: 32Mi
            cpu: 50m
        ports:
        - containerPort: 8080  # Prometheus metrics port
        - containerPort: 8081  # Health check port
        env:
        # Discord env vars
        #- name: EXPORTER_PORT
        #  value: '8080'
        #- name: HEALTH_PORT
        #  value: '8081'
        #- name: POLLING_INTERVAL
        #  value: '10'
        - name: DISCORD_TOKEN
          value: '<YOUR_DISCORD_BOT_TOKEN>'
        # Other env vars
        - name: LOGURU_COLORIZE
          value: 'true'
        - name: LOGURU_DEBUG_COLOR
          value: '<cyan><bold>'
        - name: PYTHONUNBUFFERED
          value: 'True'
        - name: PYTHONIOENCODING
          value: 'UTF-8'
        - name: TZ
          value: 'Europe/Paris'
        #- name: LOGURU_LEVEL
        #  value: 'DEBUG'
        # Healthcheck
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 60   # Allow time for Discord connection
          periodSeconds: 10
          failureThreshold: 3       # Restart after 3 consecutive failures
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 60
          periodSeconds: 5
          failureThreshold: 1       # Mark unready after 1 failure